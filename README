pmPropelGeneratorPlugin
=======================

The `pmPropelGeneratorPlugin` decouples the admin generator and the forms
framework by delegating the module behavior to the form. Also, adds to the
admin module the show action.

Installation
------------

  * Install the plugin

        [bash]
        $ ./symfony plugin:install pmPropelGeneratorPlugin

  * Clear the cache

        [bash]
        $ ./symfony cc

Configuration
-------------

  * Set the pmPropelGenerator class on generator.yml and the basic theme

        [yml]
        generator:
          class: pmPropelGenerator
          param:
            # ...
            theme: basic
            # ...

  * Configure the module as you configure the standard admin generator except
    that fields configuration and display are no longer available on new, edit,
    and show contexts (just in list, for multiple sorting configuration).

Features
--------

  * fieldset support by adding the `getFieldsets` method in the form

        [php]
        class Person extends sfFormPropel
        {
          // ...

          public function getFieldsets()
          {
            return array(
              'NONE' => array('first_name', 'last_name'),
              'Address' => array('street', 'number', 'city_id')
            );
          }

  * layout support by adding the `getLayout` method in the form

        [php]
        class Person extends sfFormPropel
        {
          // ...

          public function getLayout()
          {
            return 'tabbed'; // or 'folded'
          }

      Also you could create another layouts, creating a partial. I.E., tabbed
      layout is coded in _form_tabbed.php and _show_form_tabbed.php.

  * fields and display configuration through the form for new, edit and show
    contexts.
  * the forms are displayed in tables rather than divs (as originally in forms)
    and thus the partials are less than in the standard generator.
  * form formatters are used if defined.
  * object actions can be forbidden if a method is defined in the object. IE:

          [php]
          class Person extends BasePerson
          {
            /**
             * this method will be used to forbid the edit action in the generator
             */
            public function canEdit($sf_user)
            {
              return !$this->getLock();
            }
          }
    The method takes one argument: the user.

  * object actions can be show on a condition. IE:

          [yml]
          list:
            object_actions:
              _edit:
                show_when: canEdit
              # ...

  * external column sorting. Suppose that the model Person has a foreign key:
    document_type_id, so we want to sort the list columns by document_type.
    In this case need to do this:
    
          [yml]
          list:
            fields:
              document_type:
                peer_column: DocumentTypePeer::NAME
            peer_method: doSelectJoinDocumentType
            display: [first_name, last_name, document_type, document_number]

  * Multiple sorting

          [yml]
          list:
            multiple_sort: true

Suggestions
-----------

Email me suggestions!

TODO
----

  * Improve stylesheets (specially tabbed layout)
  * Test
  * Refactor
  * Improve show action (make it like the list context but with layout, etc.)
  * Export
  * getNewFieldsets and getEditFieldsets instead of getFieldsets
  * getNewLayout and getEditLayout instead of getLayout